Objects
-------
Tree
Lord
Vassal
VassalInfo (for a Lord)



is there a reason for askForWork to be an async call?

it's very important to compare remote and local operations (like getting a node to work on) and see by what difference they take longer.
this will help discover how important transport optimizations are.  we'll also need to separate different parts of the transport time, possibly using an eclipse profiler.
hopefully we'll come to the conclusion that we don't need transport optimizations. at worst, we'll learn how to do it.


best first search:
do DFS on a node.  at any point we have a best lower bound (less than our best solution cost).  when we get to a node that's 10% greater than that, we post back to the master node and ask for the node with the smallest lower bound.
is that right?

consider nodes sending data directly to other nodes (instead of through the master)

we still have to break the symmetry of going around in the opposite direction

should updateMinCosts for all the nodes asynchronously

Better design:
move the synchronizations on the communications to the proxy class methods

Optimizations we can do:
use the edges instead of Math.sqrt for calculating distances
all sorts of stuff with msts and held and karp vals
use fibonacci heaps
don't include crossing edges in the minimum spanning tree
right now every method of the node pool is synchronized. we shouldn't need to do this.
remove synchronizations from the proxy class methods
measure how spaced apart requests for more work happen (so we can know whether to have a lag after a request to wait for similar ones)
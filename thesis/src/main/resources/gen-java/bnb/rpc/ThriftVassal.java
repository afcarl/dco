/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package bnb.rpc;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftVassal {

  public interface Iface {

    public void updateBestSolCost(double bestCost, int jobid) throws org.apache.thrift.TException;

    public void startJobTasks(List<ThriftNodeData> nodeData, ThriftProblemData problemData, double bestCost, int jobid) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void updateBestSolCost(double bestCost, int jobid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateBestSolCost_call> resultHandler) throws org.apache.thrift.TException;

    public void startJobTasks(List<ThriftNodeData> nodeData, ThriftProblemData problemData, double bestCost, int jobid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.startJobTasks_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void updateBestSolCost(double bestCost, int jobid) throws org.apache.thrift.TException
    {
      send_updateBestSolCost(bestCost, jobid);
    }

    public void send_updateBestSolCost(double bestCost, int jobid) throws org.apache.thrift.TException
    {
      updateBestSolCost_args args = new updateBestSolCost_args();
      args.setBestCost(bestCost);
      args.setJobid(jobid);
      sendBase("updateBestSolCost", args);
    }

    public void startJobTasks(List<ThriftNodeData> nodeData, ThriftProblemData problemData, double bestCost, int jobid) throws org.apache.thrift.TException
    {
      send_startJobTasks(nodeData, problemData, bestCost, jobid);
      recv_startJobTasks();
    }

    public void send_startJobTasks(List<ThriftNodeData> nodeData, ThriftProblemData problemData, double bestCost, int jobid) throws org.apache.thrift.TException
    {
      startJobTasks_args args = new startJobTasks_args();
      args.setNodeData(nodeData);
      args.setProblemData(problemData);
      args.setBestCost(bestCost);
      args.setJobid(jobid);
      sendBase("startJobTasks", args);
    }

    public void recv_startJobTasks() throws org.apache.thrift.TException
    {
      startJobTasks_result result = new startJobTasks_result();
      receiveBase(result, "startJobTasks");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void updateBestSolCost(double bestCost, int jobid, org.apache.thrift.async.AsyncMethodCallback<updateBestSolCost_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateBestSolCost_call method_call = new updateBestSolCost_call(bestCost, jobid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBestSolCost_call extends org.apache.thrift.async.TAsyncMethodCall {
      private double bestCost;
      private int jobid;
      public updateBestSolCost_call(double bestCost, int jobid, org.apache.thrift.async.AsyncMethodCallback<updateBestSolCost_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bestCost = bestCost;
        this.jobid = jobid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBestSolCost", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateBestSolCost_args args = new updateBestSolCost_args();
        args.setBestCost(bestCost);
        args.setJobid(jobid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void startJobTasks(List<ThriftNodeData> nodeData, ThriftProblemData problemData, double bestCost, int jobid, org.apache.thrift.async.AsyncMethodCallback<startJobTasks_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startJobTasks_call method_call = new startJobTasks_call(nodeData, problemData, bestCost, jobid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startJobTasks_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ThriftNodeData> nodeData;
      private ThriftProblemData problemData;
      private double bestCost;
      private int jobid;
      public startJobTasks_call(List<ThriftNodeData> nodeData, ThriftProblemData problemData, double bestCost, int jobid, org.apache.thrift.async.AsyncMethodCallback<startJobTasks_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeData = nodeData;
        this.problemData = problemData;
        this.bestCost = bestCost;
        this.jobid = jobid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startJobTasks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startJobTasks_args args = new startJobTasks_args();
        args.setNodeData(nodeData);
        args.setProblemData(problemData);
        args.setBestCost(bestCost);
        args.setJobid(jobid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_startJobTasks();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("updateBestSolCost", new updateBestSolCost());
      processMap.put("startJobTasks", new startJobTasks());
      return processMap;
    }

    private static class updateBestSolCost<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateBestSolCost_args> {
      public updateBestSolCost() {
        super("updateBestSolCost");
      }

      protected updateBestSolCost_args getEmptyArgsInstance() {
        return new updateBestSolCost_args();
      }

      protected org.apache.thrift.TBase getResult(I iface, updateBestSolCost_args args) throws org.apache.thrift.TException {
        iface.updateBestSolCost(args.bestCost, args.jobid);
        return null;
      }
    }

    private static class startJobTasks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startJobTasks_args> {
      public startJobTasks() {
        super("startJobTasks");
      }

      protected startJobTasks_args getEmptyArgsInstance() {
        return new startJobTasks_args();
      }

      protected startJobTasks_result getResult(I iface, startJobTasks_args args) throws org.apache.thrift.TException {
        startJobTasks_result result = new startJobTasks_result();
        iface.startJobTasks(args.nodeData, args.problemData, args.bestCost, args.jobid);
        return result;
      }
    }

  }

  public static class updateBestSolCost_args implements org.apache.thrift.TBase<updateBestSolCost_args, updateBestSolCost_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBestSolCost_args");

    private static final org.apache.thrift.protocol.TField BEST_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("bestCost", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField JOBID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobid", org.apache.thrift.protocol.TType.I32, (short)2);

    public double bestCost; // required
    public int jobid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BEST_COST((short)1, "bestCost"),
      JOBID((short)2, "jobid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BEST_COST
            return BEST_COST;
          case 2: // JOBID
            return JOBID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BESTCOST_ISSET_ID = 0;
    private static final int __JOBID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BEST_COST, new org.apache.thrift.meta_data.FieldMetaData("bestCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.JOBID, new org.apache.thrift.meta_data.FieldMetaData("jobid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBestSolCost_args.class, metaDataMap);
    }

    public updateBestSolCost_args() {
    }

    public updateBestSolCost_args(
      double bestCost,
      int jobid)
    {
      this();
      this.bestCost = bestCost;
      setBestCostIsSet(true);
      this.jobid = jobid;
      setJobidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBestSolCost_args(updateBestSolCost_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.bestCost = other.bestCost;
      this.jobid = other.jobid;
    }

    public updateBestSolCost_args deepCopy() {
      return new updateBestSolCost_args(this);
    }

    @Override
    public void clear() {
      setBestCostIsSet(false);
      this.bestCost = 0.0;
      setJobidIsSet(false);
      this.jobid = 0;
    }

    public double getBestCost() {
      return this.bestCost;
    }

    public updateBestSolCost_args setBestCost(double bestCost) {
      this.bestCost = bestCost;
      setBestCostIsSet(true);
      return this;
    }

    public void unsetBestCost() {
      __isset_bit_vector.clear(__BESTCOST_ISSET_ID);
    }

    /** Returns true if field bestCost is set (has been assigned a value) and false otherwise */
    public boolean isSetBestCost() {
      return __isset_bit_vector.get(__BESTCOST_ISSET_ID);
    }

    public void setBestCostIsSet(boolean value) {
      __isset_bit_vector.set(__BESTCOST_ISSET_ID, value);
    }

    public int getJobid() {
      return this.jobid;
    }

    public updateBestSolCost_args setJobid(int jobid) {
      this.jobid = jobid;
      setJobidIsSet(true);
      return this;
    }

    public void unsetJobid() {
      __isset_bit_vector.clear(__JOBID_ISSET_ID);
    }

    /** Returns true if field jobid is set (has been assigned a value) and false otherwise */
    public boolean isSetJobid() {
      return __isset_bit_vector.get(__JOBID_ISSET_ID);
    }

    public void setJobidIsSet(boolean value) {
      __isset_bit_vector.set(__JOBID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BEST_COST:
        if (value == null) {
          unsetBestCost();
        } else {
          setBestCost((Double)value);
        }
        break;

      case JOBID:
        if (value == null) {
          unsetJobid();
        } else {
          setJobid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BEST_COST:
        return Double.valueOf(getBestCost());

      case JOBID:
        return Integer.valueOf(getJobid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BEST_COST:
        return isSetBestCost();
      case JOBID:
        return isSetJobid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBestSolCost_args)
        return this.equals((updateBestSolCost_args)that);
      return false;
    }

    public boolean equals(updateBestSolCost_args that) {
      if (that == null)
        return false;

      boolean this_present_bestCost = true;
      boolean that_present_bestCost = true;
      if (this_present_bestCost || that_present_bestCost) {
        if (!(this_present_bestCost && that_present_bestCost))
          return false;
        if (this.bestCost != that.bestCost)
          return false;
      }

      boolean this_present_jobid = true;
      boolean that_present_jobid = true;
      if (this_present_jobid || that_present_jobid) {
        if (!(this_present_jobid && that_present_jobid))
          return false;
        if (this.jobid != that.jobid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateBestSolCost_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateBestSolCost_args typedOther = (updateBestSolCost_args)other;

      lastComparison = Boolean.valueOf(isSetBestCost()).compareTo(typedOther.isSetBestCost());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBestCost()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bestCost, typedOther.bestCost);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobid()).compareTo(typedOther.isSetJobid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobid, typedOther.jobid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // BEST_COST
            if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
              this.bestCost = iprot.readDouble();
              setBestCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // JOBID
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.jobid = iprot.readI32();
              setJobidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BEST_COST_FIELD_DESC);
      oprot.writeDouble(this.bestCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JOBID_FIELD_DESC);
      oprot.writeI32(this.jobid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBestSolCost_args(");
      boolean first = true;

      sb.append("bestCost:");
      sb.append(this.bestCost);
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobid:");
      sb.append(this.jobid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class startJobTasks_args implements org.apache.thrift.TBase<startJobTasks_args, startJobTasks_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startJobTasks_args");

    private static final org.apache.thrift.protocol.TField NODE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeData", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField PROBLEM_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("problemData", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField BEST_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("bestCost", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField JOBID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobid", org.apache.thrift.protocol.TType.I32, (short)4);

    public List<ThriftNodeData> nodeData; // required
    public ThriftProblemData problemData; // required
    public double bestCost; // required
    public int jobid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_DATA((short)1, "nodeData"),
      PROBLEM_DATA((short)2, "problemData"),
      BEST_COST((short)3, "bestCost"),
      JOBID((short)4, "jobid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_DATA
            return NODE_DATA;
          case 2: // PROBLEM_DATA
            return PROBLEM_DATA;
          case 3: // BEST_COST
            return BEST_COST;
          case 4: // JOBID
            return JOBID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BESTCOST_ISSET_ID = 0;
    private static final int __JOBID_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_DATA, new org.apache.thrift.meta_data.FieldMetaData("nodeData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftNodeData.class))));
      tmpMap.put(_Fields.PROBLEM_DATA, new org.apache.thrift.meta_data.FieldMetaData("problemData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftProblemData.class)));
      tmpMap.put(_Fields.BEST_COST, new org.apache.thrift.meta_data.FieldMetaData("bestCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.JOBID, new org.apache.thrift.meta_data.FieldMetaData("jobid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startJobTasks_args.class, metaDataMap);
    }

    public startJobTasks_args() {
    }

    public startJobTasks_args(
      List<ThriftNodeData> nodeData,
      ThriftProblemData problemData,
      double bestCost,
      int jobid)
    {
      this();
      this.nodeData = nodeData;
      this.problemData = problemData;
      this.bestCost = bestCost;
      setBestCostIsSet(true);
      this.jobid = jobid;
      setJobidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startJobTasks_args(startJobTasks_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetNodeData()) {
        List<ThriftNodeData> __this__nodeData = new ArrayList<ThriftNodeData>();
        for (ThriftNodeData other_element : other.nodeData) {
          __this__nodeData.add(new ThriftNodeData(other_element));
        }
        this.nodeData = __this__nodeData;
      }
      if (other.isSetProblemData()) {
        this.problemData = new ThriftProblemData(other.problemData);
      }
      this.bestCost = other.bestCost;
      this.jobid = other.jobid;
    }

    public startJobTasks_args deepCopy() {
      return new startJobTasks_args(this);
    }

    @Override
    public void clear() {
      this.nodeData = null;
      this.problemData = null;
      setBestCostIsSet(false);
      this.bestCost = 0.0;
      setJobidIsSet(false);
      this.jobid = 0;
    }

    public int getNodeDataSize() {
      return (this.nodeData == null) ? 0 : this.nodeData.size();
    }

    public java.util.Iterator<ThriftNodeData> getNodeDataIterator() {
      return (this.nodeData == null) ? null : this.nodeData.iterator();
    }

    public void addToNodeData(ThriftNodeData elem) {
      if (this.nodeData == null) {
        this.nodeData = new ArrayList<ThriftNodeData>();
      }
      this.nodeData.add(elem);
    }

    public List<ThriftNodeData> getNodeData() {
      return this.nodeData;
    }

    public startJobTasks_args setNodeData(List<ThriftNodeData> nodeData) {
      this.nodeData = nodeData;
      return this;
    }

    public void unsetNodeData() {
      this.nodeData = null;
    }

    /** Returns true if field nodeData is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeData() {
      return this.nodeData != null;
    }

    public void setNodeDataIsSet(boolean value) {
      if (!value) {
        this.nodeData = null;
      }
    }

    public ThriftProblemData getProblemData() {
      return this.problemData;
    }

    public startJobTasks_args setProblemData(ThriftProblemData problemData) {
      this.problemData = problemData;
      return this;
    }

    public void unsetProblemData() {
      this.problemData = null;
    }

    /** Returns true if field problemData is set (has been assigned a value) and false otherwise */
    public boolean isSetProblemData() {
      return this.problemData != null;
    }

    public void setProblemDataIsSet(boolean value) {
      if (!value) {
        this.problemData = null;
      }
    }

    public double getBestCost() {
      return this.bestCost;
    }

    public startJobTasks_args setBestCost(double bestCost) {
      this.bestCost = bestCost;
      setBestCostIsSet(true);
      return this;
    }

    public void unsetBestCost() {
      __isset_bit_vector.clear(__BESTCOST_ISSET_ID);
    }

    /** Returns true if field bestCost is set (has been assigned a value) and false otherwise */
    public boolean isSetBestCost() {
      return __isset_bit_vector.get(__BESTCOST_ISSET_ID);
    }

    public void setBestCostIsSet(boolean value) {
      __isset_bit_vector.set(__BESTCOST_ISSET_ID, value);
    }

    public int getJobid() {
      return this.jobid;
    }

    public startJobTasks_args setJobid(int jobid) {
      this.jobid = jobid;
      setJobidIsSet(true);
      return this;
    }

    public void unsetJobid() {
      __isset_bit_vector.clear(__JOBID_ISSET_ID);
    }

    /** Returns true if field jobid is set (has been assigned a value) and false otherwise */
    public boolean isSetJobid() {
      return __isset_bit_vector.get(__JOBID_ISSET_ID);
    }

    public void setJobidIsSet(boolean value) {
      __isset_bit_vector.set(__JOBID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_DATA:
        if (value == null) {
          unsetNodeData();
        } else {
          setNodeData((List<ThriftNodeData>)value);
        }
        break;

      case PROBLEM_DATA:
        if (value == null) {
          unsetProblemData();
        } else {
          setProblemData((ThriftProblemData)value);
        }
        break;

      case BEST_COST:
        if (value == null) {
          unsetBestCost();
        } else {
          setBestCost((Double)value);
        }
        break;

      case JOBID:
        if (value == null) {
          unsetJobid();
        } else {
          setJobid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_DATA:
        return getNodeData();

      case PROBLEM_DATA:
        return getProblemData();

      case BEST_COST:
        return Double.valueOf(getBestCost());

      case JOBID:
        return Integer.valueOf(getJobid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_DATA:
        return isSetNodeData();
      case PROBLEM_DATA:
        return isSetProblemData();
      case BEST_COST:
        return isSetBestCost();
      case JOBID:
        return isSetJobid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startJobTasks_args)
        return this.equals((startJobTasks_args)that);
      return false;
    }

    public boolean equals(startJobTasks_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeData = true && this.isSetNodeData();
      boolean that_present_nodeData = true && that.isSetNodeData();
      if (this_present_nodeData || that_present_nodeData) {
        if (!(this_present_nodeData && that_present_nodeData))
          return false;
        if (!this.nodeData.equals(that.nodeData))
          return false;
      }

      boolean this_present_problemData = true && this.isSetProblemData();
      boolean that_present_problemData = true && that.isSetProblemData();
      if (this_present_problemData || that_present_problemData) {
        if (!(this_present_problemData && that_present_problemData))
          return false;
        if (!this.problemData.equals(that.problemData))
          return false;
      }

      boolean this_present_bestCost = true;
      boolean that_present_bestCost = true;
      if (this_present_bestCost || that_present_bestCost) {
        if (!(this_present_bestCost && that_present_bestCost))
          return false;
        if (this.bestCost != that.bestCost)
          return false;
      }

      boolean this_present_jobid = true;
      boolean that_present_jobid = true;
      if (this_present_jobid || that_present_jobid) {
        if (!(this_present_jobid && that_present_jobid))
          return false;
        if (this.jobid != that.jobid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startJobTasks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startJobTasks_args typedOther = (startJobTasks_args)other;

      lastComparison = Boolean.valueOf(isSetNodeData()).compareTo(typedOther.isSetNodeData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeData, typedOther.nodeData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProblemData()).compareTo(typedOther.isSetProblemData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblemData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problemData, typedOther.problemData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBestCost()).compareTo(typedOther.isSetBestCost());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBestCost()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bestCost, typedOther.bestCost);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobid()).compareTo(typedOther.isSetJobid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobid, typedOther.jobid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NODE_DATA
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                this.nodeData = new ArrayList<ThriftNodeData>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  ThriftNodeData _elem10; // required
                  _elem10 = new ThriftNodeData();
                  _elem10.read(iprot);
                  this.nodeData.add(_elem10);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PROBLEM_DATA
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.problemData = new ThriftProblemData();
              this.problemData.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // BEST_COST
            if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
              this.bestCost = iprot.readDouble();
              setBestCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // JOBID
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.jobid = iprot.readI32();
              setJobidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.nodeData != null) {
        oprot.writeFieldBegin(NODE_DATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.nodeData.size()));
          for (ThriftNodeData _iter11 : this.nodeData)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.problemData != null) {
        oprot.writeFieldBegin(PROBLEM_DATA_FIELD_DESC);
        this.problemData.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BEST_COST_FIELD_DESC);
      oprot.writeDouble(this.bestCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JOBID_FIELD_DESC);
      oprot.writeI32(this.jobid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startJobTasks_args(");
      boolean first = true;

      sb.append("nodeData:");
      if (this.nodeData == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("problemData:");
      if (this.problemData == null) {
        sb.append("null");
      } else {
        sb.append(this.problemData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bestCost:");
      sb.append(this.bestCost);
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobid:");
      sb.append(this.jobid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class startJobTasks_result implements org.apache.thrift.TBase<startJobTasks_result, startJobTasks_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startJobTasks_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startJobTasks_result.class, metaDataMap);
    }

    public startJobTasks_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startJobTasks_result(startJobTasks_result other) {
    }

    public startJobTasks_result deepCopy() {
      return new startJobTasks_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startJobTasks_result)
        return this.equals((startJobTasks_result)that);
      return false;
    }

    public boolean equals(startJobTasks_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startJobTasks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startJobTasks_result typedOther = (startJobTasks_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startJobTasks_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}

/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package bnb.rpc;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftLord {

  public interface Iface {

    public void sendBestSolCost(double bestCost, int jobid, int vassalid) throws org.apache.thrift.TException;

    public List<ThriftNodeData> askForWork(int jobid) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void sendBestSolCost(double bestCost, int jobid, int vassalid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.sendBestSolCost_call> resultHandler) throws org.apache.thrift.TException;

    public void askForWork(int jobid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.askForWork_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void sendBestSolCost(double bestCost, int jobid, int vassalid) throws org.apache.thrift.TException
    {
      send_sendBestSolCost(bestCost, jobid, vassalid);
      recv_sendBestSolCost();
    }

    public void send_sendBestSolCost(double bestCost, int jobid, int vassalid) throws org.apache.thrift.TException
    {
      sendBestSolCost_args args = new sendBestSolCost_args();
      args.setBestCost(bestCost);
      args.setJobid(jobid);
      args.setVassalid(vassalid);
      sendBase("sendBestSolCost", args);
    }

    public void recv_sendBestSolCost() throws org.apache.thrift.TException
    {
      sendBestSolCost_result result = new sendBestSolCost_result();
      receiveBase(result, "sendBestSolCost");
      return;
    }

    public List<ThriftNodeData> askForWork(int jobid) throws org.apache.thrift.TException
    {
      send_askForWork(jobid);
      return recv_askForWork();
    }

    public void send_askForWork(int jobid) throws org.apache.thrift.TException
    {
      askForWork_args args = new askForWork_args();
      args.setJobid(jobid);
      sendBase("askForWork", args);
    }

    public List<ThriftNodeData> recv_askForWork() throws org.apache.thrift.TException
    {
      askForWork_result result = new askForWork_result();
      receiveBase(result, "askForWork");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "askForWork failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void sendBestSolCost(double bestCost, int jobid, int vassalid, org.apache.thrift.async.AsyncMethodCallback<sendBestSolCost_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendBestSolCost_call method_call = new sendBestSolCost_call(bestCost, jobid, vassalid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendBestSolCost_call extends org.apache.thrift.async.TAsyncMethodCall {
      private double bestCost;
      private int jobid;
      private int vassalid;
      public sendBestSolCost_call(double bestCost, int jobid, int vassalid, org.apache.thrift.async.AsyncMethodCallback<sendBestSolCost_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bestCost = bestCost;
        this.jobid = jobid;
        this.vassalid = vassalid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendBestSolCost", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendBestSolCost_args args = new sendBestSolCost_args();
        args.setBestCost(bestCost);
        args.setJobid(jobid);
        args.setVassalid(vassalid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sendBestSolCost();
      }
    }

    public void askForWork(int jobid, org.apache.thrift.async.AsyncMethodCallback<askForWork_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      askForWork_call method_call = new askForWork_call(jobid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class askForWork_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int jobid;
      public askForWork_call(int jobid, org.apache.thrift.async.AsyncMethodCallback<askForWork_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobid = jobid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("askForWork", org.apache.thrift.protocol.TMessageType.CALL, 0));
        askForWork_args args = new askForWork_args();
        args.setJobid(jobid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ThriftNodeData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_askForWork();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("sendBestSolCost", new sendBestSolCost());
      processMap.put("askForWork", new askForWork());
      return processMap;
    }

    private static class sendBestSolCost<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendBestSolCost_args> {
      public sendBestSolCost() {
        super("sendBestSolCost");
      }

      protected sendBestSolCost_args getEmptyArgsInstance() {
        return new sendBestSolCost_args();
      }

      protected sendBestSolCost_result getResult(I iface, sendBestSolCost_args args) throws org.apache.thrift.TException {
        sendBestSolCost_result result = new sendBestSolCost_result();
        iface.sendBestSolCost(args.bestCost, args.jobid, args.vassalid);
        return result;
      }
    }

    private static class askForWork<I extends Iface> extends org.apache.thrift.ProcessFunction<I, askForWork_args> {
      public askForWork() {
        super("askForWork");
      }

      protected askForWork_args getEmptyArgsInstance() {
        return new askForWork_args();
      }

      protected askForWork_result getResult(I iface, askForWork_args args) throws org.apache.thrift.TException {
        askForWork_result result = new askForWork_result();
        result.success = iface.askForWork(args.jobid);
        return result;
      }
    }

  }

  public static class sendBestSolCost_args implements org.apache.thrift.TBase<sendBestSolCost_args, sendBestSolCost_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendBestSolCost_args");

    private static final org.apache.thrift.protocol.TField BEST_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("bestCost", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField JOBID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField VASSALID_FIELD_DESC = new org.apache.thrift.protocol.TField("vassalid", org.apache.thrift.protocol.TType.I32, (short)3);

    public double bestCost; // required
    public int jobid; // required
    public int vassalid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BEST_COST((short)1, "bestCost"),
      JOBID((short)2, "jobid"),
      VASSALID((short)3, "vassalid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BEST_COST
            return BEST_COST;
          case 2: // JOBID
            return JOBID;
          case 3: // VASSALID
            return VASSALID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BESTCOST_ISSET_ID = 0;
    private static final int __JOBID_ISSET_ID = 1;
    private static final int __VASSALID_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BEST_COST, new org.apache.thrift.meta_data.FieldMetaData("bestCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.JOBID, new org.apache.thrift.meta_data.FieldMetaData("jobid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VASSALID, new org.apache.thrift.meta_data.FieldMetaData("vassalid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendBestSolCost_args.class, metaDataMap);
    }

    public sendBestSolCost_args() {
    }

    public sendBestSolCost_args(
      double bestCost,
      int jobid,
      int vassalid)
    {
      this();
      this.bestCost = bestCost;
      setBestCostIsSet(true);
      this.jobid = jobid;
      setJobidIsSet(true);
      this.vassalid = vassalid;
      setVassalidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendBestSolCost_args(sendBestSolCost_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.bestCost = other.bestCost;
      this.jobid = other.jobid;
      this.vassalid = other.vassalid;
    }

    public sendBestSolCost_args deepCopy() {
      return new sendBestSolCost_args(this);
    }

    @Override
    public void clear() {
      setBestCostIsSet(false);
      this.bestCost = 0.0;
      setJobidIsSet(false);
      this.jobid = 0;
      setVassalidIsSet(false);
      this.vassalid = 0;
    }

    public double getBestCost() {
      return this.bestCost;
    }

    public sendBestSolCost_args setBestCost(double bestCost) {
      this.bestCost = bestCost;
      setBestCostIsSet(true);
      return this;
    }

    public void unsetBestCost() {
      __isset_bit_vector.clear(__BESTCOST_ISSET_ID);
    }

    /** Returns true if field bestCost is set (has been assigned a value) and false otherwise */
    public boolean isSetBestCost() {
      return __isset_bit_vector.get(__BESTCOST_ISSET_ID);
    }

    public void setBestCostIsSet(boolean value) {
      __isset_bit_vector.set(__BESTCOST_ISSET_ID, value);
    }

    public int getJobid() {
      return this.jobid;
    }

    public sendBestSolCost_args setJobid(int jobid) {
      this.jobid = jobid;
      setJobidIsSet(true);
      return this;
    }

    public void unsetJobid() {
      __isset_bit_vector.clear(__JOBID_ISSET_ID);
    }

    /** Returns true if field jobid is set (has been assigned a value) and false otherwise */
    public boolean isSetJobid() {
      return __isset_bit_vector.get(__JOBID_ISSET_ID);
    }

    public void setJobidIsSet(boolean value) {
      __isset_bit_vector.set(__JOBID_ISSET_ID, value);
    }

    public int getVassalid() {
      return this.vassalid;
    }

    public sendBestSolCost_args setVassalid(int vassalid) {
      this.vassalid = vassalid;
      setVassalidIsSet(true);
      return this;
    }

    public void unsetVassalid() {
      __isset_bit_vector.clear(__VASSALID_ISSET_ID);
    }

    /** Returns true if field vassalid is set (has been assigned a value) and false otherwise */
    public boolean isSetVassalid() {
      return __isset_bit_vector.get(__VASSALID_ISSET_ID);
    }

    public void setVassalidIsSet(boolean value) {
      __isset_bit_vector.set(__VASSALID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BEST_COST:
        if (value == null) {
          unsetBestCost();
        } else {
          setBestCost((Double)value);
        }
        break;

      case JOBID:
        if (value == null) {
          unsetJobid();
        } else {
          setJobid((Integer)value);
        }
        break;

      case VASSALID:
        if (value == null) {
          unsetVassalid();
        } else {
          setVassalid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BEST_COST:
        return Double.valueOf(getBestCost());

      case JOBID:
        return Integer.valueOf(getJobid());

      case VASSALID:
        return Integer.valueOf(getVassalid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BEST_COST:
        return isSetBestCost();
      case JOBID:
        return isSetJobid();
      case VASSALID:
        return isSetVassalid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendBestSolCost_args)
        return this.equals((sendBestSolCost_args)that);
      return false;
    }

    public boolean equals(sendBestSolCost_args that) {
      if (that == null)
        return false;

      boolean this_present_bestCost = true;
      boolean that_present_bestCost = true;
      if (this_present_bestCost || that_present_bestCost) {
        if (!(this_present_bestCost && that_present_bestCost))
          return false;
        if (this.bestCost != that.bestCost)
          return false;
      }

      boolean this_present_jobid = true;
      boolean that_present_jobid = true;
      if (this_present_jobid || that_present_jobid) {
        if (!(this_present_jobid && that_present_jobid))
          return false;
        if (this.jobid != that.jobid)
          return false;
      }

      boolean this_present_vassalid = true;
      boolean that_present_vassalid = true;
      if (this_present_vassalid || that_present_vassalid) {
        if (!(this_present_vassalid && that_present_vassalid))
          return false;
        if (this.vassalid != that.vassalid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendBestSolCost_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendBestSolCost_args typedOther = (sendBestSolCost_args)other;

      lastComparison = Boolean.valueOf(isSetBestCost()).compareTo(typedOther.isSetBestCost());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBestCost()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bestCost, typedOther.bestCost);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobid()).compareTo(typedOther.isSetJobid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobid, typedOther.jobid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVassalid()).compareTo(typedOther.isSetVassalid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVassalid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vassalid, typedOther.vassalid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // BEST_COST
            if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
              this.bestCost = iprot.readDouble();
              setBestCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // JOBID
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.jobid = iprot.readI32();
              setJobidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // VASSALID
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.vassalid = iprot.readI32();
              setVassalidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BEST_COST_FIELD_DESC);
      oprot.writeDouble(this.bestCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JOBID_FIELD_DESC);
      oprot.writeI32(this.jobid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VASSALID_FIELD_DESC);
      oprot.writeI32(this.vassalid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendBestSolCost_args(");
      boolean first = true;

      sb.append("bestCost:");
      sb.append(this.bestCost);
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobid:");
      sb.append(this.jobid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vassalid:");
      sb.append(this.vassalid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class sendBestSolCost_result implements org.apache.thrift.TBase<sendBestSolCost_result, sendBestSolCost_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendBestSolCost_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendBestSolCost_result.class, metaDataMap);
    }

    public sendBestSolCost_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendBestSolCost_result(sendBestSolCost_result other) {
    }

    public sendBestSolCost_result deepCopy() {
      return new sendBestSolCost_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendBestSolCost_result)
        return this.equals((sendBestSolCost_result)that);
      return false;
    }

    public boolean equals(sendBestSolCost_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendBestSolCost_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendBestSolCost_result typedOther = (sendBestSolCost_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendBestSolCost_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class askForWork_args implements org.apache.thrift.TBase<askForWork_args, askForWork_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("askForWork_args");

    private static final org.apache.thrift.protocol.TField JOBID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobid", org.apache.thrift.protocol.TType.I32, (short)1);

    public int jobid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOBID((short)1, "jobid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOBID
            return JOBID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __JOBID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOBID, new org.apache.thrift.meta_data.FieldMetaData("jobid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(askForWork_args.class, metaDataMap);
    }

    public askForWork_args() {
    }

    public askForWork_args(
      int jobid)
    {
      this();
      this.jobid = jobid;
      setJobidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public askForWork_args(askForWork_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.jobid = other.jobid;
    }

    public askForWork_args deepCopy() {
      return new askForWork_args(this);
    }

    @Override
    public void clear() {
      setJobidIsSet(false);
      this.jobid = 0;
    }

    public int getJobid() {
      return this.jobid;
    }

    public askForWork_args setJobid(int jobid) {
      this.jobid = jobid;
      setJobidIsSet(true);
      return this;
    }

    public void unsetJobid() {
      __isset_bit_vector.clear(__JOBID_ISSET_ID);
    }

    /** Returns true if field jobid is set (has been assigned a value) and false otherwise */
    public boolean isSetJobid() {
      return __isset_bit_vector.get(__JOBID_ISSET_ID);
    }

    public void setJobidIsSet(boolean value) {
      __isset_bit_vector.set(__JOBID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOBID:
        if (value == null) {
          unsetJobid();
        } else {
          setJobid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOBID:
        return Integer.valueOf(getJobid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOBID:
        return isSetJobid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof askForWork_args)
        return this.equals((askForWork_args)that);
      return false;
    }

    public boolean equals(askForWork_args that) {
      if (that == null)
        return false;

      boolean this_present_jobid = true;
      boolean that_present_jobid = true;
      if (this_present_jobid || that_present_jobid) {
        if (!(this_present_jobid && that_present_jobid))
          return false;
        if (this.jobid != that.jobid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(askForWork_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      askForWork_args typedOther = (askForWork_args)other;

      lastComparison = Boolean.valueOf(isSetJobid()).compareTo(typedOther.isSetJobid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobid, typedOther.jobid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // JOBID
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.jobid = iprot.readI32();
              setJobidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(JOBID_FIELD_DESC);
      oprot.writeI32(this.jobid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("askForWork_args(");
      boolean first = true;

      sb.append("jobid:");
      sb.append(this.jobid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class askForWork_result implements org.apache.thrift.TBase<askForWork_result, askForWork_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("askForWork_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<ThriftNodeData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftNodeData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(askForWork_result.class, metaDataMap);
    }

    public askForWork_result() {
    }

    public askForWork_result(
      List<ThriftNodeData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public askForWork_result(askForWork_result other) {
      if (other.isSetSuccess()) {
        List<ThriftNodeData> __this__success = new ArrayList<ThriftNodeData>();
        for (ThriftNodeData other_element : other.success) {
          __this__success.add(new ThriftNodeData(other_element));
        }
        this.success = __this__success;
      }
    }

    public askForWork_result deepCopy() {
      return new askForWork_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ThriftNodeData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ThriftNodeData elem) {
      if (this.success == null) {
        this.success = new ArrayList<ThriftNodeData>();
      }
      this.success.add(elem);
    }

    public List<ThriftNodeData> getSuccess() {
      return this.success;
    }

    public askForWork_result setSuccess(List<ThriftNodeData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ThriftNodeData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof askForWork_result)
        return this.equals((askForWork_result)that);
      return false;
    }

    public boolean equals(askForWork_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(askForWork_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      askForWork_result typedOther = (askForWork_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                this.success = new ArrayList<ThriftNodeData>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  ThriftNodeData _elem18; // required
                  _elem18 = new ThriftNodeData();
                  _elem18.read(iprot);
                  this.success.add(_elem18);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (ThriftNodeData _iter19 : this.success)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("askForWork_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
